<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="ProjectControllerTest" tests="4" skipped="0" failures="0" errors="0" timestamp="2019-10-06T15:13:10" hostname="rustam" time="0.515">
  <properties/>
  <testcase name="Find project by id" classname="ProjectControllerTest" time="0.196"/>
  <testcase name="Find all projects by current user" classname="ProjectControllerTest" time="0.296"/>
  <testcase name="Create new project - 403" classname="ProjectControllerTest" time="0.011"/>
  <testcase name="Find project by id - 403" classname="ProjectControllerTest" time="0.011"/>
  <system-out><![CDATA[2019-10-06 15:13:10.292  INFO 22388 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Neither @ContextConfiguration nor @ContextHierarchy found for test class [ProjectControllerTest], using SpringBootContextLoader
2019-10-06 15:13:10.293  INFO 22388 --- [    Test worker] o.s.t.c.support.AbstractContextLoader    : Could not detect default resource locations for test class [ProjectControllerTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2019-10-06 15:13:10.302  INFO 22388 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener, org.springframework.security.test.context.support.ReactorContextTestExecutionListener, org.spockframework.spring.SpringMockTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener]
2019-10-06 15:13:10.304  INFO 22388 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@611d030b, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@6baf916d, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@625b1525, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@3ecbda26, org.springframework.test.context.support.DirtiesContextTestExecutionListener@37c783af, org.springframework.test.context.transaction.TransactionalTestExecutionListener@20f458c3, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@1a3c93c5, org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener@7a46604e, org.springframework.security.test.context.support.ReactorContextTestExecutionListener@71974e52, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@732732e3, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@d7b35f9, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@44766008, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@f58530a, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@4522d828, org.spockframework.spring.SpringMockTestExecutionListener@1122f988]
Hibernate: 
    /* insert ru.rmamedov.taskmanager.model.User
        */ insert 
        into
            app_user
            (created, email, first_name, last_name, password, phone, updated, username, version, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* SELECT
        u 
    FROM
        User u 
    LEFT JOIN
        FETCH u.projects 
    WHERE
        u.username = :username */ select
            user0_.id as id1_0_0_,
            project2_.id as id1_2_1_,
            user0_.created as created2_0_0_,
            user0_.email as email3_0_0_,
            user0_.first_name as first_na4_0_0_,
            user0_.last_name as last_nam5_0_0_,
            user0_.password as password6_0_0_,
            user0_.phone as phone7_0_0_,
            user0_.updated as updated8_0_0_,
            user0_.username as username9_0_0_,
            user0_.version as version10_0_0_,
            project2_.created as created2_2_1_,
            project2_.created_by_id as created_8_2_1_,
            project2_.description as descript3_2_1_,
            project2_.name as name4_2_1_,
            project2_.start_date as start_da5_2_1_,
            project2_.updated as updated6_2_1_,
            project2_.version as version7_2_1_,
            projects1_.user_id as user_id1_5_0__,
            projects1_.project_id as project_2_5_0__ 
        from
            app_user user0_ 
        left outer join
            users_projects projects1_ 
                on user0_.id=projects1_.user_id 
        left outer join
            project project2_ 
                on projects1_.project_id=project2_.id 
        where
            user0_.username=?
Hibernate: 
    select
        roles0_.user_id as user_id1_6_0_,
        roles0_.role_id as role_id2_6_0_,
        role1_.id as id1_3_1_,
        role1_.name as name2_3_1_,
        role1_.version as version3_3_1_ 
    from
        users_roles roles0_ 
    inner join
        role role1_ 
            on roles0_.role_id=role1_.id 
    where
        roles0_.user_id=?
Hibernate: 
    /* insert ru.rmamedov.taskmanager.model.Project
        */ insert 
        into
            project
            (created, created_by_id, description, name, start_date, updated, version, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* update
        ru.rmamedov.taskmanager.model.User */ update
            app_user 
        set
            email=?,
            first_name=?,
            last_name=?,
            password=?,
            phone=?,
            updated=?,
            username=?,
            version=? 
        where
            id=? 
            and version=?
Hibernate: 
    /* insert collection
        row ru.rmamedov.taskmanager.model.User.projects */ insert 
        into
            users_projects
            (user_id, project_id) 
        values
            (?, ?)
Hibernate: 
    /* select
        generatedAlias0 
    from
        Project as generatedAlias0 */ select
            project0_.id as id1_2_,
            project0_.created as created2_2_,
            project0_.created_by_id as created_8_2_,
            project0_.description as descript3_2_,
            project0_.name as name4_2_,
            project0_.start_date as start_da5_2_,
            project0_.updated as updated6_2_,
            project0_.version as version7_2_ 
        from
            project project0_
Hibernate: 
    /* SELECT
        p 
    FROM
        Project p 
    WHERE
        p.id = :id */ select
            project0_.id as id1_2_,
            project0_.created as created2_2_,
            project0_.created_by_id as created_8_2_,
            project0_.description as descript3_2_,
            project0_.name as name4_2_,
            project0_.start_date as start_da5_2_,
            project0_.updated as updated6_2_,
            project0_.version as version7_2_ 
        from
            project project0_ 
        where
            project0_.id=?

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/project/find/f2987ff9-cd56-4337-884b-0ad27ac387d0
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = ru.rmamedov.taskmanager.controller.ProjectController
           Method = public org.springframework.http.ResponseEntity<ru.rmamedov.taskmanager.model.DTO.ProjectDetailsProjection> ru.rmamedov.taskmanager.controller.ProjectController.findById(java.lang.String)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json;charset=UTF-8", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json;charset=UTF-8
             Body = {"created":"06/10/2019 15:13","updated":"06/10/2019 15:13","startDate":"07/10/2019","name":"XJxQHloRVi","id":"f2987ff9-cd56-4337-884b-0ad27ac387d0","description":"dDVMtdQVeD"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    /* insert ru.rmamedov.taskmanager.model.User
        */ insert 
        into
            app_user
            (created, email, first_name, last_name, password, phone, updated, username, version, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* SELECT
        u 
    FROM
        User u 
    LEFT JOIN
        FETCH u.projects 
    WHERE
        u.username = :username */ select
            user0_.id as id1_0_0_,
            project2_.id as id1_2_1_,
            user0_.created as created2_0_0_,
            user0_.email as email3_0_0_,
            user0_.first_name as first_na4_0_0_,
            user0_.last_name as last_nam5_0_0_,
            user0_.password as password6_0_0_,
            user0_.phone as phone7_0_0_,
            user0_.updated as updated8_0_0_,
            user0_.username as username9_0_0_,
            user0_.version as version10_0_0_,
            project2_.created as created2_2_1_,
            project2_.created_by_id as created_8_2_1_,
            project2_.description as descript3_2_1_,
            project2_.name as name4_2_1_,
            project2_.start_date as start_da5_2_1_,
            project2_.updated as updated6_2_1_,
            project2_.version as version7_2_1_,
            projects1_.user_id as user_id1_5_0__,
            projects1_.project_id as project_2_5_0__ 
        from
            app_user user0_ 
        left outer join
            users_projects projects1_ 
                on user0_.id=projects1_.user_id 
        left outer join
            project project2_ 
                on projects1_.project_id=project2_.id 
        where
            user0_.username=?
Hibernate: 
    select
        roles0_.user_id as user_id1_6_0_,
        roles0_.role_id as role_id2_6_0_,
        role1_.id as id1_3_1_,
        role1_.name as name2_3_1_,
        role1_.version as version3_3_1_ 
    from
        users_roles roles0_ 
    inner join
        role role1_ 
            on roles0_.role_id=role1_.id 
    where
        roles0_.user_id=?
Hibernate: 
    /* insert ru.rmamedov.taskmanager.model.Project
        */ insert 
        into
            project
            (created, created_by_id, description, name, start_date, updated, version, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* update
        ru.rmamedov.taskmanager.model.User */ update
            app_user 
        set
            email=?,
            first_name=?,
            last_name=?,
            password=?,
            phone=?,
            updated=?,
            username=?,
            version=? 
        where
            id=? 
            and version=?
Hibernate: 
    /* insert collection
        row ru.rmamedov.taskmanager.model.User.projects */ insert 
        into
            users_projects
            (user_id, project_id) 
        values
            (?, ?)
Hibernate: 
    /* insert ru.rmamedov.taskmanager.model.User
        */ insert 
        into
            app_user
            (created, email, first_name, last_name, password, phone, updated, username, version, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2019-10-06 15:13:10.745  WARN 22388 --- [    Test worker] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 23001, SQLState: 23001
2019-10-06 15:13:10.745 ERROR 22388 --- [    Test worker] o.h.engine.jdbc.spi.SqlExceptionHelper   : Unique index or primary key violation: "UK_3K4CPLVH82SRUEUTTFKWNYLQ0_INDEX_7 ON PUBLIC.APP_USER(USERNAME)"; SQL statement:
/* insert ru.rmamedov.taskmanager.model.User */ insert into app_user (created, email, first_name, last_name, password, phone, updated, username, version, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) [23001-148]
2019-10-06 15:13:10.746 ERROR 22388 --- [    Test worker] o.h.i.ExceptionMapperStandardImpl        : HHH000346: Error during managed flush [org.hibernate.exception.ConstraintViolationException: could not execute statement]
Hibernate: 
    /* SELECT
        u 
    FROM
        User u 
    LEFT JOIN
        FETCH u.projects 
    WHERE
        u.username = :username */ select
            user0_.id as id1_0_0_,
            project2_.id as id1_2_1_,
            user0_.created as created2_0_0_,
            user0_.email as email3_0_0_,
            user0_.first_name as first_na4_0_0_,
            user0_.last_name as last_nam5_0_0_,
            user0_.password as password6_0_0_,
            user0_.phone as phone7_0_0_,
            user0_.updated as updated8_0_0_,
            user0_.username as username9_0_0_,
            user0_.version as version10_0_0_,
            project2_.created as created2_2_1_,
            project2_.created_by_id as created_8_2_1_,
            project2_.description as descript3_2_1_,
            project2_.name as name4_2_1_,
            project2_.start_date as start_da5_2_1_,
            project2_.updated as updated6_2_1_,
            project2_.version as version7_2_1_,
            projects1_.user_id as user_id1_5_0__,
            projects1_.project_id as project_2_5_0__ 
        from
            app_user user0_ 
        left outer join
            users_projects projects1_ 
                on user0_.id=projects1_.user_id 
        left outer join
            project project2_ 
                on projects1_.project_id=project2_.id 
        where
            user0_.username=?
Hibernate: 
    select
        roles0_.user_id as user_id1_6_0_,
        roles0_.role_id as role_id2_6_0_,
        role1_.id as id1_3_1_,
        role1_.name as name2_3_1_,
        role1_.version as version3_3_1_ 
    from
        users_roles roles0_ 
    inner join
        role role1_ 
            on roles0_.role_id=role1_.id 
    where
        roles0_.user_id=?
Hibernate: 
    /* insert ru.rmamedov.taskmanager.model.Project
        */ insert 
        into
            project
            (created, created_by_id, description, name, start_date, updated, version, id) 
        values
            (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* update
        ru.rmamedov.taskmanager.model.User */ update
            app_user 
        set
            email=?,
            first_name=?,
            last_name=?,
            password=?,
            phone=?,
            updated=?,
            username=?,
            version=? 
        where
            id=? 
            and version=?
Hibernate: 
    /* insert collection
        row ru.rmamedov.taskmanager.model.User.projects */ insert 
        into
            users_projects
            (user_id, project_id) 
        values
            (?, ?)
Hibernate: 
    /* select
        generatedAlias0 
    from
        Project as generatedAlias0 */ select
            project0_.id as id1_2_,
            project0_.created as created2_2_,
            project0_.created_by_id as created_8_2_,
            project0_.description as descript3_2_,
            project0_.name as name4_2_,
            project0_.start_date as start_da5_2_,
            project0_.updated as updated6_2_,
            project0_.version as version7_2_ 
        from
            project project0_
Hibernate: 
    /* SELECT
        u 
    FROM
        User u 
    LEFT JOIN
        FETCH u.projects 
    WHERE
        u.username = :username */ select
            user0_.id as id1_0_0_,
            project2_.id as id1_2_1_,
            user0_.created as created2_0_0_,
            user0_.email as email3_0_0_,
            user0_.first_name as first_na4_0_0_,
            user0_.last_name as last_nam5_0_0_,
            user0_.password as password6_0_0_,
            user0_.phone as phone7_0_0_,
            user0_.updated as updated8_0_0_,
            user0_.username as username9_0_0_,
            user0_.version as version10_0_0_,
            project2_.created as created2_2_1_,
            project2_.created_by_id as created_8_2_1_,
            project2_.description as descript3_2_1_,
            project2_.name as name4_2_1_,
            project2_.start_date as start_da5_2_1_,
            project2_.updated as updated6_2_1_,
            project2_.version as version7_2_1_,
            projects1_.user_id as user_id1_5_0__,
            projects1_.project_id as project_2_5_0__ 
        from
            app_user user0_ 
        left outer join
            users_projects projects1_ 
                on user0_.id=projects1_.user_id 
        left outer join
            project project2_ 
                on projects1_.project_id=project2_.id 
        where
            user0_.username=?
Hibernate: 
    select
        roles0_.user_id as user_id1_6_0_,
        roles0_.role_id as role_id2_6_0_,
        role1_.id as id1_3_1_,
        role1_.name as name2_3_1_,
        role1_.version as version3_3_1_ 
    from
        users_roles roles0_ 
    inner join
        role role1_ 
            on roles0_.role_id=role1_.id 
    where
        roles0_.user_id=?
Hibernate: 
    /* SELECT
        p 
    FROM
        Project p 
    LEFT JOIN
        FETCH p.users 
    WHERE
        p.id = :id */ select
            project0_.id as id1_2_0_,
            user2_.id as id1_0_1_,
            project0_.created as created2_2_0_,
            project0_.created_by_id as created_8_2_0_,
            project0_.description as descript3_2_0_,
            project0_.name as name4_2_0_,
            project0_.start_date as start_da5_2_0_,
            project0_.updated as updated6_2_0_,
            project0_.version as version7_2_0_,
            user2_.created as created2_0_1_,
            user2_.email as email3_0_1_,
            user2_.first_name as first_na4_0_1_,
            user2_.last_name as last_nam5_0_1_,
            user2_.password as password6_0_1_,
            user2_.phone as phone7_0_1_,
            user2_.updated as updated8_0_1_,
            user2_.username as username9_0_1_,
            user2_.version as version10_0_1_,
            users1_.project_id as project_2_5_0__,
            users1_.user_id as user_id1_5_0__ 
        from
            project project0_ 
        left outer join
            users_projects users1_ 
                on project0_.id=users1_.project_id 
        left outer join
            app_user user2_ 
                on users1_.user_id=user2_.id 
        where
            project0_.id=?
Hibernate: 
    /* SELECT
        u 
    FROM
        User u 
    LEFT JOIN
        FETCH u.projects 
    WHERE
        u.username = :username */ select
            user0_.id as id1_0_0_,
            project2_.id as id1_2_1_,
            user0_.created as created2_0_0_,
            user0_.email as email3_0_0_,
            user0_.first_name as first_na4_0_0_,
            user0_.last_name as last_nam5_0_0_,
            user0_.password as password6_0_0_,
            user0_.phone as phone7_0_0_,
            user0_.updated as updated8_0_0_,
            user0_.username as username9_0_0_,
            user0_.version as version10_0_0_,
            project2_.created as created2_2_1_,
            project2_.created_by_id as created_8_2_1_,
            project2_.description as descript3_2_1_,
            project2_.name as name4_2_1_,
            project2_.start_date as start_da5_2_1_,
            project2_.updated as updated6_2_1_,
            project2_.version as version7_2_1_,
            projects1_.user_id as user_id1_5_0__,
            projects1_.project_id as project_2_5_0__ 
        from
            app_user user0_ 
        left outer join
            users_projects projects1_ 
                on user0_.id=projects1_.user_id 
        left outer join
            project project2_ 
                on projects1_.project_id=project2_.id 
        where
            user0_.username=?
Hibernate: 
    select
        roles0_.user_id as user_id1_6_0_,
        roles0_.role_id as role_id2_6_0_,
        role1_.id as id1_3_1_,
        role1_.name as name2_3_1_,
        role1_.version as version3_3_1_ 
    from
        users_roles roles0_ 
    inner join
        role role1_ 
            on roles0_.role_id=role1_.id 
    where
        roles0_.user_id=?
Hibernate: 
    /* SELECT
        p 
    FROM
        Project p 
    LEFT JOIN
        FETCH p.users 
    WHERE
        p.id = :id */ select
            project0_.id as id1_2_0_,
            user2_.id as id1_0_1_,
            project0_.created as created2_2_0_,
            project0_.created_by_id as created_8_2_0_,
            project0_.description as descript3_2_0_,
            project0_.name as name4_2_0_,
            project0_.start_date as start_da5_2_0_,
            project0_.updated as updated6_2_0_,
            project0_.version as version7_2_0_,
            user2_.created as created2_0_1_,
            user2_.email as email3_0_1_,
            user2_.first_name as first_na4_0_1_,
            user2_.last_name as last_nam5_0_1_,
            user2_.password as password6_0_1_,
            user2_.phone as phone7_0_1_,
            user2_.updated as updated8_0_1_,
            user2_.username as username9_0_1_,
            user2_.version as version10_0_1_,
            users1_.project_id as project_2_5_0__,
            users1_.user_id as user_id1_5_0__ 
        from
            project project0_ 
        left outer join
            users_projects users1_ 
                on project0_.id=users1_.project_id 
        left outer join
            app_user user2_ 
                on users1_.user_id=user2_.id 
        where
            project0_.id=?
Hibernate: 
    /* select
        generatedAlias0 
    from
        User as generatedAlias0 
    where
        generatedAlias0.username=:param0 */ select
            user0_.id as id1_0_,
            user0_.created as created2_0_,
            user0_.email as email3_0_,
            user0_.first_name as first_na4_0_,
            user0_.last_name as last_nam5_0_,
            user0_.password as password6_0_,
            user0_.phone as phone7_0_,
            user0_.updated as updated8_0_,
            user0_.username as username9_0_,
            user0_.version as version10_0_ 
        from
            app_user user0_ 
        where
            user0_.username=?
Hibernate: 
    select
        roles0_.user_id as user_id1_6_0_,
        roles0_.role_id as role_id2_6_0_,
        role1_.id as id1_3_1_,
        role1_.name as name2_3_1_,
        role1_.version as version3_3_1_ 
    from
        users_roles roles0_ 
    inner join
        role role1_ 
            on roles0_.role_id=role1_.id 
    where
        roles0_.user_id=?
Hibernate: 
    /* SELECT
        p 
    FROM
        Project p 
    WHERE
        :user MEMBER OF p.users 
        OR p.createdBy = :user */ select
            project0_.id as id1_2_,
            project0_.created as created2_2_,
            project0_.created_by_id as created_8_2_,
            project0_.description as descript3_2_,
            project0_.name as name4_2_,
            project0_.start_date as start_da5_2_,
            project0_.updated as updated6_2_,
            project0_.version as version7_2_ 
        from
            project project0_ 
        where
            ? in (
                select
                    users1_.user_id 
                from
                    users_projects users1_ 
                where
                    project0_.id=users1_.project_id
            ) 
            or project0_.created_by_id=?

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/project/all
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = ru.rmamedov.taskmanager.controller.ProjectController
           Method = public org.springframework.http.ResponseEntity<java.util.Set<ru.rmamedov.taskmanager.model.DTO.ProjectProjection>> ru.rmamedov.taskmanager.controller.ProjectController.findAllByUserId(org.springframework.security.core.Authentication)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json;charset=UTF-8", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json;charset=UTF-8
             Body = [{"name":"PDZGjEKLHb","id":"8f5d8b33-d21f-46ee-866f-99db80d1d62d","description":"AcGkjeseVA"},{"name":"hcnPEiXalN","id":"f140fca3-9881-48fd-b77b-569ada9b4c7b","description":"XYTAlcSZJI"}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /api/manager/project/save
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = {"id":null,"name":"LqxUpzDuUk","description":"SnQmoKehza","created":null,"updated":null,"startDate":"2019-10-07","createdBy":null,"users":[]}
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 403
    Error message = Access Denied
          Headers = [X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/project/find/123
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 403
    Error message = Access Denied
          Headers = [X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
